<launch>

  <param name="use_sim_time" value="true"/>
  <node pkg="rosbag" type="play" name="bags" 
        args="$(find rc_backhoe_ros)/sample_data/imu/rc_backhoe_up_limit.bag
              -r 1.0 -l --clock" 
        launch-prefix="bash -c 'sleep 1; $0 $@' " />

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find rc_backhoe_moveit)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="simple" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="false" />

  <!-- If needed, broadcast static tf for robot root -->

  <node pkg="tf2_ros" type="static_transform_publisher" name="tf2_map2base"
        args="0.0 0.0 0.0 0.0 0.0 0.0 map base_link" />

  <group ns="rc_backhoe">

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
    <rosparam file="$(find rc_backhoe_moveit)/config/ros_controllers.yaml" command="load"/>

    <node name="controller_spawner" pkg="controller_manager" 
            type="controller_manager" respawn="false"
            output="screen" 
            args="spawn rc_backhoe_controller"/> 

    <node name="rc_backhoe_control" pkg="rc_backhoe_control" type="rc_backhoe_control" output="screen" respawn="false" >
        <remap from="cmd" to="cmd/actuator" />
    </node>

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find rc_backhoe_moveit)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
        <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="pipeline" value="$(arg pipeline)"/>
        <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    </include>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find rc_backhoe_moveit)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
        <arg name="rviz_config" value="$(find rc_backhoe_moveit)/launch/moveit.rviz"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

    <!-- If database loading was enabled, start mongodb as well -->
    <include file="$(find rc_backhoe_moveit)/launch/default_warehouse_db.launch" if="$(arg db)">
        <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
    </include>

    <!-- backhoe joint angle publishers for imu -->
    <!-- <node name="imu_serial_node" pkg="rosserial_python" type="serial_node.py">
        <param name="port" value="/dev/ttyACM0"/>
        <param name="baud" value="57600"/>
    </node> -->
    <node name="imu_msg_converter" pkg="rc_backhoe_state" type="imu_msg_converter.py">
    </node>
    <group ns="swing">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <param name="fixed_frame" value="map" />
        </node>
    </group>
    <group ns="boom">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <param name="fixed_frame" value="map" />
        </node>
    </group>
    <group ns="arm">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <param name="fixed_frame" value="map" />
        </node>
    </group>
    <group ns="bucket">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <param name="fixed_frame" value="map" />
        </node>
    </group>
    <node name="joint_publisher_from_imu" pkg="rc_backhoe_state" type="joint_publisher_from_imu.py" />
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" > -->
        <!-- <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam> -->
    <!-- </node> -->
    <node name="rc_bachoe_moveit_joint_planner" pkg="rc_backhoe_ros" type="rc_bachoe_moveit_joint_planner.py" output="screen" launch-prefix="bash -c 'sleep 4; $0 $@' "/>

  </group>

  <param name="hztest_cmd/topic" value="/rc_backhoe/cmd/actuator" />
  <param name="hztest_cmd/hz" value="100.0" />
  <param name="hztest_cmd/hzerror" value="50.0" />
  <param name="hztest_cmd/test_duration" value="15.0" />
  <test test-name="hztest_cmd" pkg="rostest" type="hztest" name="hztest_cmd" />

</launch>
