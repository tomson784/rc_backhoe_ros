<launch>

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find rc_backhoe_moveit)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="simple" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="true" />
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->

  <arg name="paused" default="false"/>
  <arg name="gazebo_gui" default="true"/>
  <arg name="initial_joint_positions" doc="Initial joint configuration of the robot"
       default=""/>

  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="paused" value="true"/>
    <arg name="gui" value="$(arg gazebo_gui)"/>
  </include>

  <!-- send robot urdf to param server -->
  <param name="robot_description" command="xacro  '$(find rc_backhoe_description)/urdf/rc_backhoe.xacro'" />

  <!-- unpause only after loading robot model -->
  <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
  <!-- push robot_description to factory and spawn robot in gazebo at the origin, change x,y,z arguments to spawn in a different position -->
  <arg name="world_pose" value="-x 0 -y 0 -z 0" />
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot $(arg unpause) $(arg world_pose) $(arg initial_joint_positions)"
    respawn="false" output="screen" />

  <group ns="rc_backhoe">

    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node>
    <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node> -->
    <group ns="swing">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <!-- <param name="fixed_frame" value="body_link" /> -->
        </node>
    </group>
    <group ns="boom">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <!-- <param name="fixed_frame" value="body_link" /> -->
        </node>
    </group>
    <group ns="arm">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <!-- <param name="fixed_frame" value="body_link" /> -->
        </node>
    </group>
    <group ns="bucket">
        <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
            <param name="use_mag" value="false" />
            <param name="publish_tf" value="false" />
            <!-- <param name="fixed_frame" value="body_link" /> -->
        </node>
    </group>
    <node name="joint_publisher_from_imu" pkg="rc_backhoe_state" type="joint_publisher_from_imu.py" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
    <rosparam file="$(find rc_backhoe_moveit)/config/ros_controllers.yaml" command="load"/>

    <node name="controller_spawner" pkg="controller_manager" 
            type="controller_manager" respawn="false"
            output="screen" 
            args="spawn rc_backhoe_controller"/> 
    <node name="rc_backhoe_control" pkg="rc_backhoe_control" type="rc_backhoe_control" output="screen" respawn="false" >
        <remap from="cmd" to="cmd/actuator" />
    </node>

    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(dirname)/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
        <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="pipeline" value="$(arg pipeline)"/>
        <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    </include>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(dirname)/moveit_rviz.launch" if="$(arg use_rviz)">
        <arg name="rviz_config" value="$(dirname)/moveit.rviz"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

    <!-- If database loading was enabled, start mongodb as well -->
    <include file="$(dirname)/default_warehouse_db.launch" if="$(arg db)">
        <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
    </include>
  </group>
</launch>
